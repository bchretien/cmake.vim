{"name":"cmake.vim","tagline":"Incorporates the functionality of CMake into Vim.","body":"# CMake Project Support in Vim\r\n\r\n> [CMake](http://www.cmake.org) is the ONLY way you should be building your C or \r\n> C++ projects. [Vim](http://www.vim.org) is the ultimate text editor. Together, \r\n> along with the power of gray skull, CMake support in Vim is born.\r\n\r\n---\r\n\r\n[`cmake.vim`](https://github.com/jalcine/cmake.vim/tree/v0.2.0) `v0.2.0` is a Vim \r\nplugin that allows you to build your projects that are based on the CMake \r\nmeta-build system.\r\n\r\nIf lost, run `:help cmake` for a bit of guidance.\r\n\r\n## Requirements\r\nAt the time of writing, `cmake.vim` has been tested with Vim 7.3+ in nocp mode \r\nand CMake 2.8.\r\n\r\n## Installing\r\nI recommending using [Vundle](http://github.com/gmarik/vundle) to install \r\nplugins. The line necessary to add this plugin is as follows:\r\n\r\n```viml\r\nBundle 'jalcine/cmake.vim`\r\n```\r\n\r\n## Getting Started\r\n\r\nAfter you installed the plugin, just `cd` into the directory where the\r\ntop-level CMakeLists.txt can be found and run:\r\n\r\n```viml\r\n:CMakeCreateProject <build-dir-name>\r\n:CMakeBuild\r\n```\r\n\r\nWith that, you created (or re-configured in a vanilla-setup) a new binary\r\ndirectory and built the project.\r\n\r\n## Commands\r\n`cmake.vim` defines a few methods for generic interaction with CMake. Check\r\nout `:help cmake-methods` for more information.\r\n\r\n## Options\r\nIn order for CMake to operate, it **has** to know where the build directory is \r\nlocated. This is done automatically by the plugin but it does need help in the \r\nevent that you happen to build your CMake project in a sub-directory. Check\r\nout `:help cmake-options` for more information.\r\n\r\n## Integrations\r\n\r\nSee [`:help cmake-integrations`][doc/cmake.txt] for tips on integrations `cmake.vim` with\r\nother plug-ins like `syntastic` or `YouCompleteMe`.\r\n\r\n## Known Issues\r\n\r\n  * You can't pass in options for configuring the project at first-run (or\r\n    later on, actually). At the moment, you can *obtain* values from the cache\r\n    by using `:CMakeGetVar`.\r\n\r\n## To-Dos\r\n\r\n  * Provide `:CMakeBuildTarget` that'd build the target provided. If a file is\r\n    to be provided, find the target for that file and build the target it\r\n    belongs to (restricted to source files).\r\n    * Also for `:CMakeCleanTarget` since we can determine pre-target cleaning\r\n      information.\r\n  * Improve integration's use flag lookup and discovery on a per-target basis\r\n    and a per-file basis (restricted to source files).\r\n  * Pass an argument string to `:CMakeCreateBuild`.\r\n  * Allow setting and getting values using `:CMakeGetVar` and `:CMakeSetVar`.\r\n  * Expose `cmake.vim`'s buffer commands only in `worthy` buffers.\r\n\r\n## License\r\nThis code is released and available under the MIT license. Multiply and be \r\nfruitful.\r\n\r\n## Author\r\nI'm [Jacky Alcine](http://jalcine.me) and I like code. A lot. \r\nI also chat a lot like a firehose so follow with caution!\r\n","google":"UA-21819111-3","note":"Don't delete this file! It's used internally to help with page regeneration."}